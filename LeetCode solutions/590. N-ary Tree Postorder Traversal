-----------------------------recursive approach---------------------------------------------------------------
-----------------------------Java------------------------------------------------------
class Solution {
    private List<Integer> res = new ArrayList<>();
    public List<Integer> postorder(Node root) {
        populateRes(root);
        return res;
    }
    private void populateRes(Node root){
        if(root == null)return;
        for(var child : root.children){
            populateRes(child);
        }
        res.add(root.val);
    }
}
-----------------------------C++-------------------------------------------------------
class Solution {
private:
    vector<int> res;
    
    void populateRes(Node* root) {
        if(root == nullptr) return;
        for(auto child : root->children) {
            populateRes(child);
        }
        res.push_back(root->val);
    }
    
public:
    vector<int> postorder(Node* root) {
        populateRes(root);
        return res;
    }
};


-----------------------------iterative approach---------------------------------------------------------------
-----------------------------Java------------------------------------------------------
class Solution {
    public List<Integer> postorder(Node root) {
        List<Integer> res = new ArrayList<>();
        if(root == null)return res;
        Deque<Node> nodeStack = new ArrayDeque<>();
        nodeStack.offerLast(root);
        while(!nodeStack.isEmpty()){
            Node currNode = nodeStack.pollLast();
            res.add(currNode.val);
            for(var child : currNode.children){
                nodeStack.offerLast(child);
            }
        }
        Collections.reverse(res);
        return res;
    }
}
-----------------------------C++-------------------------------------------------------
class Solution {
public:
    vector<int> postorder(Node* root) {
        vector<int> res;
        if(root == nullptr) return res;
        deque<Node*> nodeStack;
        nodeStack.push_back(root);
        while(!nodeStack.empty()){
            Node* currNode = nodeStack.back();
            nodeStack.pop_back();
            res.push_back(currNode->val);
            for(auto child : currNode->children){
                nodeStack.push_back(child);
            }
        }
        reverse(res.begin(), res.end());
        return res;
    }
};

