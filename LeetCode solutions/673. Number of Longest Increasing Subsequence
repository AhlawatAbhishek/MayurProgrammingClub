-----------------------------C++------------------------------------------------
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        if (nums.size() == 0)
                return 0;
            int n = nums.size();
            vector<int> length(n, 1), count(n, 1);

            int lis = 1;
            for (int i = 1; i < n; i++) {
                // i is the curren element which is being considered the end of current subseq
                for (int j = 0; j < i; j++) {
                    if (nums[j] < nums[i]) {
                        if (length[j] + 1 > length[i]) {//size of lis will increase
                            length[i] = length[j] + 1;
                            count[i] = count[j];// encountring this size 'lenght[i]' for the first time
                        } else if (length[j] + 1 == length[i]) {
                            //size of lis remains same
                            count[i] += count[j];
                            //we have encountred this sized strictly increasing subseq before
                        }
                    }
                }
                //lis length of longest strictly increasing subseq
                lis = max(lis, length[i]);
            }

            int numLis = 0;//num of longest strictly increasing subseq
            for (int i = 0; i < n; i++)
                if (length[i] == lis)
                    numLis += count[i];

            return numLis;
    }
};
--------------------------------------------------Java----------------------------------
class Solution {
    public int findNumberOfLIS(int[] nums) {
           if (nums.length == 0)
                return 0;
            int n = nums.length;
            int[] length = new int[n], count = new int[n];
            Arrays.fill(length, 1);
            Arrays.fill(count, 1);

            int lis = 1;
            for (int i = 1; i < n; i++) {
                for (int j = 0; j < i; j++) {
                    if (nums[j] < nums[i]) {
                        if (length[j] + 1 > length[i]) {//size of lis will increase
                            length[i] = length[j] + 1;
                            count[i] = count[j];
                        } else if (length[j] + 1 == length[i]) {
                            //size of lis remains same
                            count[i] += count[j];
                        }
                    }
                }
                lis = Math.max(lis, length[i]);
            }

            int numLis = 0;
            for (int i = 0; i < n; i++)
                if (length[i] == lis)
                    numLis += count[i];

            return numLis;
    }
} 
