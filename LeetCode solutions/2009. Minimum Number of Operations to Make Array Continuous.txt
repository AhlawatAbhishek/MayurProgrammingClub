-------------------------------------------------C++--------------------------------------------------------------
class Solution {
public:
    int minOperations(vector<int>& nums) {
        //remove duplicates
        unordered_set<int> unqEles;
        //new vector to store elements
        vector<int> unqs;
        for(auto num : nums){
            if(unqEles.find(num) == unqEles.end()){
                unqs.push_back(num);
                unqEles.insert(num);
            }
        }
       

        //sorting the unqs array / vector -- find the difference between maximum and min
        // elements in O(1) T.C.
        sort(unqs.begin(), unqs.end());


        //to use sliding window to find all the continous sub arrays in one traversal
        int endIndx = 0; //this will be the index pointing the first element that will just next to the end of current continuous array.
        //each index will be considered you starting index;


        int sz = unqs.size();
        int minOps = INT_MAX;

        
        for(int startIndx = 0; startIndx < sz; startIndx++){
            //forming the current continous sub array.
            while(endIndx < sz && unqs[endIndx] - unqs[startIndx] < nums.size())endIndx++;
            //operations required to achieve this continous array
            int opReq = nums.size() - (endIndx - startIndx);
            //update min ops
            minOps = min(minOps, opReq);
        }
        return minOps;
    }
};
-----------------------------------------------------Java----------------------------------------------------------
class Solution {
    public int minOperations(int nums[]) {
        HashSet<Integer> unqEles = new HashSet<>();
        ArrayList<Integer> unqs = new ArrayList<>();
        for(int num : nums){
            if(!unqEles.contains(num)){
                unqs.add(num);
                unqEles.add(num);
            }
        }
        Collections.sort(unqs);
        int endIndx = 0; 
        int sz = unqs.size();
        int minOps = Integer.MAX_VALUE;
        for(int startIndx = 0; startIndx < sz; startIndx++){
            while(endIndx < sz && unqs.get(endIndx) - unqs.get(startIndx) < nums.length)endIndx++;
            int opReq = nums.length - (endIndx - startIndx);
            minOps = Math.min(minOps, opReq);
        }
        return minOps;
    }
}
-----------------------------------------------------Python 3----------------------------------------------------------
class Solution:
    def minOperations(self, nums):
        unqEles = set()
        unqs = []
        for num in nums:
            if num not in unqEles:
                unqs.append(num)
                unqEles.add(num)
        unqs.sort()
        endIndx = 0
        sz = len(unqs)
        minOps = float('inf')
        for startIndx in range(sz):
            while endIndx < sz and unqs[endIndx] - unqs[startIndx] < len(nums):
                endIndx += 1
            opReq = len(nums) - (endIndx - startIndx)
            minOps = min(minOps, opReq)
        return minOps