**Java:**
```java
class Solution {
    private int[][] dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

    private void exploreIsland(char[][] grid, int r, int c) {
        grid[r][c] = '0';
        for (int[] dir : dirs) {
            int newR = r + dir[0], newC = c + dir[1];
            if (isSafe(newR, newC, grid)) {
                exploreIsland(grid, newR, newC);
            }
        }
    }

    private boolean isSafe(int newR, int newC, char[][] grid) {
        return !(newR == grid.length || newC == grid[0].length || newR < 0 || newC < 0 || grid[newR][newC] == '0');
    }

    public int numIslands(char[][] grid) {
        int islandCnt = 0;
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid[0].length; c++) {
                if (grid[r][c] == '1') {
                    exploreIsland(grid, r, c);
                    islandCnt++;
                }
            }
        }
        return islandCnt;
    }
}
```

**C++:**
```cpp
class Solution {
private:     
    int dirs[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    void exploreIsland(vector<vector<char>>&grid, int r, int c){
        grid[r][c] = '0';
        for(auto &dir : dirs){
            int newR = r + dir[0], newC = c + dir[1];
            if(isSafe(newR, newC, grid)){
              exploreIsland(grid, newR, newC);
            }
        }
    }
    bool isSafe(int newR, int newC,vector<vector<char>>&grid){
        if(newR == grid.size() || newC == grid[0].size() || newR < 0 || newC < 0 || grid[newR][newC] == '0')return false;
        return true;
    }    
public:
    int numIslands(vector<vector<char>>& grid) {
        int islandCnt = 0;
        for(int r = 0; r<grid.size(); r++){
            for(int c = 0; c < grid[0].size(); c++){
                if(grid[r][c] == '1'){
                    exploreIsland(grid, r, c);
                    islandCnt++;
                }
            }
        }
        return islandCnt;
    }
};
```
