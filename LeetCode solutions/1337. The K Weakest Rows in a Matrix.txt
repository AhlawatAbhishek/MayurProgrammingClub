------------------------C++----------------------------------------------------------------------
class Solution {
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int rows = mat.size(), cols = mat[0].size();
        //make a 2d to store {soldCnt, rowIndx} pair
        vector<vector<int>> weakArr; 
        for(int r = 0; r < rows; r++){
            int soldCnt = 0;
            for(int c = 0; c < cols; c++){
                soldCnt += mat[r][c];
            }
            weakArr.push_back({soldCnt, r});
        }
        //sort acc. to ascend. order of number of soldiers and then acc. to indicies of rows or say row numbers
        sort(weakArr.begin(), weakArr.end(), [](const vector<int> & v1, const vector<int> & v2)->bool{
           if(v1[0] != v2[0])return v1[0] < v2[0];
           else return v1[1] < v2[1];
        }); 
        //then inidicies of 'k' weakest rows
        vector<int> res;
        for(auto &arr : weakArr){
            res.push_back(arr[1]);
            if(res.size() == k)break;
        }
        return res;
    }
};
-------------------------------------------------------Java-----------------------------------------------
class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        int rows = mat.length;
        int cols = mat[0].length;
        
        List<int[]> weakArr = new ArrayList<>();
        for (int r = 0; r < rows; r++) {
            int soldCnt = 0;
            for (int c = 0; c < cols; c++) {
                soldCnt += mat[r][c];
            }
            weakArr.add(new int[]{soldCnt, r});
        }
        
        weakArr.sort(new Comparator<int[]>() {
            public int compare(int[] v1, int[] v2) {
                if (v1[0] != v2[0]) {
                    return Integer.compare(v1[0], v2[0]);
                } else {
                    return Integer.compare(v1[1], v2[1]);
                }
            }
        });
        
        int[] res = new int[k];
        for (int i = 0; i < k; i++) {
            res[i] = weakArr.get(i)[1];
        }
        return res;
    }
}