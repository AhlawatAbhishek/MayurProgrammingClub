-------------------------------Java------------------------------------------------------------------------------------
class Solution {
    public int robotSim(int[] commands, int[][] obstacles) {
        // To uniquely convert 2D coordinates to 1D coordinates for fast lookup for obstacles when robot will be moving.
        // Prime number as a multiplier ensures that the hash function is less likely to produce patterns that lead to collisions because prime numbers have no divisors other than 1 and themselves.
        int multiplier = 60001; // from -30000 to 30000 range
        Set<Integer> obsCordHashes = new HashSet<>();
        for (var obsCord : obstacles) {
            int oneDCord = getOneDCord(obsCord[0], obsCord[1], multiplier);
            obsCordHashes.add(oneDCord);
        }  
        
        int maxDistSq = 0;  
        int currDir = 0;
        int currCord[] = {0, 0};
        // North - 0, East - 1, South - 2, West - 3 // Clockwise
        int dirs[][] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        for (var com : commands) {
            if (com > 0) {
                int dir[] = dirs[currDir];
                while(com -- > 0) {
                    int nextX = currCord[0] + dir[0]; 
                    int nextY = currCord[1] + dir[1];
                    int currOneDCord = getOneDCord(nextX, nextY, multiplier);
                    if (obsCordHashes.contains(currOneDCord)) {
                        break;
                    }
                    currCord[0] = nextX; 
                    currCord[1] = nextY;
                }
                maxDistSq = Math.max(maxDistSq, currCord[0] * currCord[0] + currCord[1] * currCord[1]);
            } else {
                if (com == -2) { // Turn left --> since going clockwise i.e., right always, to go left go 3 places in one go
                    currDir = (currDir + 3) % 4;
                } else { // Turn right
                    currDir = (currDir + 1) % 4;
                }
            }
        }
        return maxDistSq;
    }

    private int getOneDCord(int x, int y, int mul) {
        return x + mul * y;
    }
}

-------------------------------C++------------------------------------------------------------------------------------
class Solution {
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        // To uniquely convert 2D coordinates to 1D coordinates for fast lookup for obstacles when robot will be moving.
        // Prime number as a multiplier ensures that the hash function is less likely to produce patterns that lead to collisions because prime numbers have no divisors other than 1 and themselves.
        int multiplier = 60001; // from -30000 to 30000 range
        unordered_set<int> obsCordHashes;
        for (auto& obsCord : obstacles) {
            int oneDCord = getOneDCord(obsCord[0], obsCord[1], multiplier);
            obsCordHashes.insert(oneDCord);
        }  
        
        int maxDistSq = 0;  
        int currDir = 0;
        vector<int> currCord = {0, 0};
        // North - 0, East - 1, South - 2, West - 3 // Clockwise
        vector<vector<int>> dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        for (auto com : commands) {
            if (com > 0) {
                vector<int> dir = dirs[currDir];
                while(com-- > 0) {
                    int nextX = currCord[0] + dir[0]; 
                    int nextY = currCord[1] + dir[1];
                    int currOneDCord = getOneDCord(nextX, nextY, multiplier);
                    if (obsCordHashes.count(currOneDCord)) {
                        break;
                    }
                    currCord[0] = nextX; 
                    currCord[1] = nextY;
                }
                maxDistSq = max(maxDistSq, currCord[0] * currCord[0] + currCord[1] * currCord[1]);
            } else {
                if (com == -2) { // Turn left --> since going clockwise i.e., right always, to go left go 3 places in one go
                    currDir = (currDir + 3) % 4;
                } else { // Turn right
                    currDir = (currDir + 1) % 4;
                }
            }
        }
        return maxDistSq;
    }

private:
    int getOneDCord(int x, int y, int mul) {
        return x + mul * y;
    }
};

