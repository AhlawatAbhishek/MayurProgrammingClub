-----------------------------------------------------------------1------------------------------------------------------
========================C++==========================================
//TC: O(n), |nums| = n;
//SC: O(n) 
class Solution {
public:
    int minimumSum(vector<int>& nums) {
        int sz = nums.size();
        //these two arrays will be used to find minimum element on left till before a particular index and minimum element on right
        //before a particular index
        vector<int> minLeft(sz, 0), minRight(sz, 0);
        
        //to fill minimum on left you will traverse the given nums array in left to right direction
        for(int indx = 0; indx < sz; indx++){
            minLeft[indx] = min((indx - 1 > -1) ? minLeft[indx-1] : INT_MAX, nums[indx]);
        }
        //to find the minimum on right you will traverse the given nums array in right to left direction
        for(int indx = sz - 1; indx >= 0; indx--){
            minRight[indx] = min((indx + 1 < sz) ? minRight[indx+1] : INT_MAX, nums[indx]);
        }
        //the is the value you will be returing from you method or say function
        int minSum = INT_MAX;
        //then for each index in range (1 to sz -1)(to get at least three elements) find minimum element on it's right and left sides and if they staisfy the conditions to a mountain triplet then consider the sum of triplet element to update the value of 
        //minSum
        for(int indx = 1; indx < sz-1; indx++){
            if(minLeft[indx - 1] >= nums[indx] || minRight[indx + 1] >= nums[indx])continue;
            int leftValue = minLeft[indx - 1];
            int rightValue = minRight[indx + 1];
            minSum = min(minSum, nums[indx] + rightValue + leftValue);
        }
        // and at last you will return minimum sum
        return minSum == INT_MAX ? - 1 : minSum;
    }
};
========================Java==========================================
class Solution {
    public int minimumSum(int []nums) {
        int sz = nums.length;
        int minLeft[] = new int[sz];
        int minRight[] = new int[sz];
        for(int indx = 0; indx < sz; indx++){
            minLeft[indx] = Math.min((indx - 1 > -1) ? minLeft[indx-1] : Integer.MAX_VALUE, nums[indx]);
        }
        for(int indx = sz - 1; indx >= 0; indx--){
            minRight[indx] =  Math.min((indx + 1 < sz) ? minRight[indx + 1] : Integer.MAX_VALUE, nums[indx]);
        }
        int minSum = Integer.MAX_VALUE;
        for(int indx = 1; indx < sz-1; indx++){
            if(minLeft[indx-1] >= nums[indx] || minRight[indx+1] >= nums[indx])continue;
            int leftValue = minLeft[indx - 1];
            int rightValue = minRight[indx+1];
            minSum = Math.min(minSum, nums[indx] + rightValue + leftValue);
        }
        return minSum == Integer.MAX_VALUE ? - 1 : minSum;
    }
}

------------------------------------------------------------2-----------------------------------------------------------------------------
========================C++==========================================

//TC: O(n), |nums| = n;
//SC: O(n) 
class Solution {
public:
    int minimumSum(vector<int>& nums) {
        int sz = nums.size();
        //these two arrays will be used to find minimum element on left till before a particular index and minimum element on right
        //before a particular index
        vector<int> minLeft(sz, 0), minRight(sz, 0);
        
        //to fill minimum on left you will traverse the given nums array in left to right direction
        for(int indx = 0; indx < sz; indx++){
            minLeft[indx] = min((indx - 1 > -1) ? minLeft[indx-1] : INT_MAX, nums[indx]);
        }
        //to find the minimum on right you will traverse the given nums array in right to left direction
        for(int indx = sz - 1; indx >= 0; indx--){
            minRight[indx] = min((indx + 1 < sz) ? minRight[indx+1] : INT_MAX, nums[indx]);
        }
        //the is the value you will be returing from you method or say function
        int minSum = INT_MAX;
        //then for each index in range (1 to sz -1)(to get at least three elements) find minimum element on it's right and left sides and if they staisfy the conditions to a mountain triplet then consider the sum of triplet element to update the value of 
        //minSum
        for(int indx = 1; indx < sz-1; indx++){
            if(minLeft[indx - 1] >= nums[indx] || minRight[indx + 1] >= nums[indx])continue;
            int leftValue = minLeft[indx - 1];
            int rightValue = minRight[indx + 1];
            minSum = min(minSum, nums[indx] + rightValue + leftValue);
        }
        // and at last you will return minimum sum
        return minSum == INT_MAX ? - 1 : minSum;
    }
};
========================Java==========================================
class Solution {
    public int minimumSum(int []nums) {
        int sz = nums.length;
        int minLeft[] = new int[sz];
        int minRight[] = new int[sz];
        for(int indx = 0; indx < sz; indx++){
            minLeft[indx] = Math.min((indx - 1 > -1) ? minLeft[indx-1] : Integer.MAX_VALUE, nums[indx]);
        }
        for(int indx = sz - 1; indx >= 0; indx--){
            minRight[indx] =  Math.min((indx + 1 < sz) ? minRight[indx + 1] : Integer.MAX_VALUE, nums[indx]);
        }
        int minSum = Integer.MAX_VALUE;
        for(int indx = 1; indx < sz-1; indx++){
            if(minLeft[indx-1] >= nums[indx] || minRight[indx+1] >= nums[indx])continue;
            int leftValue = minLeft[indx - 1];
            int rightValue = minRight[indx+1];
            minSum = Math.min(minSum, nums[indx] + rightValue + leftValue);
        }
        return minSum == Integer.MAX_VALUE ? - 1 : minSum;
    }
}

----------------------------------------------------------------------3-------------------------------------------------------------------
========================C++==========================================
class Solution {
 private:
    bool isGrpSzPoss(int purpGrpSz, unordered_map<int, int>& freq) {
        for (auto &pr : freq) {
            int eleFreq = pr.second;

            int leftOutsOfEleFreq = eleFreq % purpGrpSz;
            int fullSizeGrps = eleFreq / purpGrpSz;
            //in case there are not left out elements then continue with your check
            if(leftOutsOfEleFreq == 0)continue;
            //group size can be one higher or one lower than the purposed group size
            //difference between group size can at max be one so leftOutFreq can be adjusted in fullSize groups, some or all
            //of which will have size one more than the purposed group size
            int grpSlotReq = (purpGrpSz - 1) - leftOutsOfEleFreq;
            if (grpSlotReq && fullSizeGrps < grpSlotReq) {
                return false;
            }
        }
        return true;
    }   
 public:
  int minGroupsForValidAssignment(vector<int>& nums) {
    int maxGrpSz = 0, sz = nums.size();
    //caputre the frequencies of each element in the given nums array or say vector
    unordered_map<int, int> freq;
    for (auto num : nums){
          freq[num]++;
    }
    //element with maxFreq
    for(auto &pr : freq){
        maxGrpSz = max(pr.second, maxGrpSz);
    }

    //greedily try to fit maximum elements in a single to group to minimize the number of groups 
    for (int grpSize = maxGrpSz; grpSize >  0; grpSize--) {
        //if let's say the current group size that we are puroposing is valid one then we will count the number of groups and return them
      if (isGrpSzPoss(grpSize, freq)) {
        int minGrpsReq = 0;
        for (auto & pr : freq) {
          int eleFreq = pr.second;
          //if there left out elements 
          int leftOutsOfEleFreq = eleFreq % grpSize;

          minGrpsReq = minGrpsReq + (eleFreq / grpSize);
          if (leftOutsOfEleFreq > 0) minGrpsReq++;
        }
        return minGrpsReq;
      }
    }
    //if any of the purposed group size is not possible then you will reutrn -1
    return -1;
  }

  
};
========================Java==========================================
class Solution {
    private boolean isGrpSzPoss(int purpGrpSz, Map<Integer, Integer> freq) {
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            int eleFreq = entry.getValue();
            int leftOutsOfEleFreq = eleFreq % purpGrpSz;
            int fullSizeGrps = eleFreq / purpGrpSz;
            if (leftOutsOfEleFreq == 0) continue;
            int grpSlotReq = (purpGrpSz - 1) - leftOutsOfEleFreq;
            if (grpSlotReq != 0 && fullSizeGrps < grpSlotReq) {
                return false;
            }
        }
        return true;
    }

    public int minGroupsForValidAssignment(int[] nums) {
        int maxGrpSz = 0, sz = nums.length;
        Map<Integer, Integer> freq = new HashMap<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            maxGrpSz = Math.max(entry.getValue(), maxGrpSz);
        }
        for (int grpSize = maxGrpSz; grpSize > 0; grpSize--) {
            if (isGrpSzPoss(grpSize, freq)) {
                int minGrpsReq = 0;
                for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
                    int eleFreq = entry.getValue();
                    int leftOutsOfEleFreq = eleFreq % grpSize;
                    minGrpsReq += eleFreq / grpSize;
                    if (leftOutsOfEleFreq > 0) minGrpsReq++;
                }
                return minGrpsReq;
            }
        }
        return -1;
    }
}
