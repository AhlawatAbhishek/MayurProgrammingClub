-----------------------------------------------------------------Java-----------------------------------------------------------------------------------------------------------------
class Solution {
    public int minimumTime(int[][] grid) {
        if (grid[0][1] > 1 && grid[1][0] > 1) {
            return -1;
        }

        int rows = grid.length, cols = grid[0].length;
        int[][] dirs = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
        boolean[][] visited = new boolean[rows][cols];

        PriorityQueue<int[]> cellQ = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        cellQ.add(new int[] { grid[0][0], 0, 0 });

        while (!cellQ.isEmpty()) {
            int[] curr = cellQ.poll();
            int time = curr[0], row = curr[1], col = curr[2];

            if (row == rows - 1 && col == cols - 1) {
                return time;
            }

            if (visited[row][col]) {
                continue;
            }
            visited[row][col] = true;

            for (var dir : dirs) {
                int newRow = row + dir[0], newCol = col + dir[1];

                if (newRow < 0 || newCol < 0 || newRow == rows || newCol == cols || visited[newRow][newCol]) {
                    continue;
                }
                int waitTime = (grid[newRow][newCol] - time) % 2 == 0 ? 1 : 0;
                int nextTime = Math.max(grid[newRow][newCol] + waitTime, time + 1);
                cellQ.add(new int[] { nextTime, newRow, newCol });
            }
        }
        return -1;
    }
}

