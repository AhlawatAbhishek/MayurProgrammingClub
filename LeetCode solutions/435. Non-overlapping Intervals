---------------------------------------------------C++---------------------------------------------------------------------------------------------
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end(), [](const vector<int> & v1, const vector<int> & v2)->bool{
          if(v1[1] ==  v2[1])return v1[0] > v2[0];
          return v1[1] < v2[1];
        });
        // for(auto &v : intervals){
        //     cout<<v[0]<<" "<<v[1]<<"\n";
        // }
        //cout<<"\n"<<endl;
        int cntSkip = 0, prevEnd = intervals[0][1]; 
        for(int indx = 1; indx<intervals.size(); indx++){           //cout<<"prevEnd "<<prevEnd<<" "<<"cntSkip "<<cntSkip<<"\n";
            int currStart = intervals[indx][0], currEnd = intervals[indx][1];
           if(prevEnd <= currStart){
               prevEnd = currEnd;
           }else{
               cntSkip++;
           }           
        }
        return cntSkip;
    }
};
----------------------------------------------------------Java----------------------------------------------------------------------------
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
          Arrays.sort(intervals, (int v1[], int v2[])->{
          if(v1[1]==v2[1])return  v2[0] - v1[0];
          return v1[1] - v2[1];
        });
        // for(auto &v : intervals){
        //     cout<<v[0]<<" "<<v[1]<<"\n";
        // }
        //cout<<"\n"<<endl;
        int cntSkip = 0, prevEnd = intervals[0][1]; 
        for(int indx = 1; indx<intervals.length; indx++){           //cout<<"prevEnd "<<prevEnd<<" "<<"cntSkip "<<cntSkip<<"\n";
            int currStart = intervals[indx][0], currEnd = intervals[indx][1];
           if(prevEnd <= currStart){
               prevEnd = currEnd;
           }else{
               cntSkip++;
           }           
        }
        return cntSkip;
    }
}
