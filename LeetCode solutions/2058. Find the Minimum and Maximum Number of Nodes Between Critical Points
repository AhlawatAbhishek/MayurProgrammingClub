--------------------Java---------------------------------------
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int minDist = Integer.MAX_VALUE, maxDist = Integer.MIN_VALUE;
        ListNode prevNode = head;
        int currLoc = 0, minCriticLoc = Integer.MAX_VALUE, maxCriticLoc = Integer.MIN_VALUE;
        for(ListNode currNode = head; currNode != null; currNode = currNode.next){
            currLoc++;
            if(currLoc > 1 && currNode.next != null && ((currNode.next.val < currNode.val && prevNode.val < currNode.val) || ((currNode.next.val > currNode.val && prevNode.val > currNode.val)))){
                if(minCriticLoc != Integer.MAX_VALUE){
                    minDist = Math.min(minDist, currLoc - maxCriticLoc);
                    maxDist = Math.max(maxDist, currLoc - minCriticLoc);
                }
                if(minCriticLoc == Integer.MAX_VALUE){
                    minCriticLoc = currLoc;
                }
                maxCriticLoc = currLoc;
            }
            prevNode = currNode;

        }
        return new int[]{(minDist == Integer.MAX_VALUE ? -1 : minDist), (maxDist == Integer.MIN_VALUE ? -1 : maxDist)};
    }
}
----------------------C++--------------------------------------
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
        int minDist = INT_MAX, maxDist = INT_MIN;
        ListNode* prevNode = head;
        int currLoc = 0, minCriticLoc = INT_MAX, maxCriticLoc = INT_MIN;
        for (ListNode* currNode = head; currNode != nullptr; currNode = currNode->next) {
            currLoc++;
            if (currLoc > 1 && currNode->next != nullptr &&
                ((currNode->next->val < currNode->val && prevNode->val < currNode->val) ||
                 (currNode->next->val > currNode->val && prevNode->val > currNode->val))) {
                if (minCriticLoc != INT_MAX) {
                    minDist = min(minDist, currLoc - maxCriticLoc);
                    maxDist = max(maxDist, currLoc - minCriticLoc);
                }
                if (minCriticLoc == INT_MAX) {
                    minCriticLoc = currLoc;
                }
                maxCriticLoc = currLoc;
            }
            prevNode = currNode;
        }
        return {minDist == INT_MAX ? -1 : minDist, maxDist == INT_MIN ? -1 : maxDist};
    }
};
