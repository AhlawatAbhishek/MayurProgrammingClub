----------------------------C++-----------------------------
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rw = matrix.size(), cl = matrix[0].size();
        // we will be searching for the element no in the range left to right and we will use binary search for that purpose
        int left = 0, right = rw * cl-1;
        while(left <= right){
            int midPos =  left + (right - left)/2;
            //we generating the co ordinates of the element no in the linear structurn
            //these co ordinates will be of the matrix given
            int r = midPos / cl, c = midPos % cl;
            // take range such that it never becomes equal to columns in matrix eg if we take range 1 to rw * cl and input is ([[1]], 0), then it result in index of bounds;
            // cout<<"r "<<r<<" c"<<c<<" rws "<<rw<<" cls "<<cl<<endl;
            if(matrix[r][c] == target){
                return true;
            }else if(matrix[r][c] < target){
                left = midPos + 1;
            }else{
                right = midPos - 1;
            }
        }
        return false;

    }
};
------------------------------------Java-------------------------------------
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rw = matrix.length, cl = matrix[0].length;
        // we will be searching for the element no in the range left to right and we will use binary search for that purpose
        int left = 0, right = rw * cl-1;
        while(left <= right){
            int midPos =  left + (right - left)/2;
            //we generating the co ordinates of the element no in the linear structurn
            //these co ordinates will be of the matrix given
            int r = midPos / cl, c = midPos % cl;
            // take range such that it never becomes equal to columns in matrix eg if we take range 1 to rw * cl and input is ([[1]], 0), then it result in index of bounds;
            // cout<<"r "<<r<<" c"<<c<<" rws "<<rw<<" cls "<<cl<<endl;
            if(matrix[r][c] == target){
                return true;
            }else if(matrix[r][c] < target){
                left = midPos + 1;
            }else{
                right = midPos - 1;
            }
        }
        return false;
    }
}
