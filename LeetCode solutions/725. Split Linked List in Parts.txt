//I have not considered the extra space used for the result array while explaning space complexity in the video
---------------------------------------------------------Java-------------------------------------------------------
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        //we are calculating the length of the linked list
        int len = 0; 
        for(ListNode curr = head; curr != null; curr = curr.next){
            len++;
        }
        //this is the array that we will be returning
        ListNode result[] = new ListNode[k];
        //no we will caculate least number of nodes each part will have i.e. 'equals' and the number of parts that will have one extra node starting from left most part i.e. 'extras'
        int extras = len % k, equals = len / k, indx = 0, size = 0;
        //these pointers or say references will be used to populate the parts
        ListNode currHead = head, currTail = null, curr = head;
        // this is we populating those part which have one extra node
        for(; indx < extras; indx++){
              while(curr != null && size < equals + 1){
                  if(currHead == null)currHead = curr;
                  currTail = curr;
                  curr = curr.next;
                  size++;
              }
            //    System.out.println(curr.val);
              result[indx] = (size > 0) ? currHead : null;
              //once you have formed a part form currHead to currTail, then you will break it's link with subsequent(following) parts
              if(currTail != null){
                  ListNode next = currTail.next;
                  currTail.next = null;
                  curr = next;
                   size = 0; 
              }
              currHead = null;
        }
        //then you will be populating parts which are just having 'equals' number of nodes
        for(indx = extras; indx < k; indx++){
            // if(curr != null)  
            //   System.out.println("curr.val: "+ curr.val);
             while(curr != null && size < equals){
                  if(currHead == null)currHead = curr;
                  currTail = curr;
                  curr = curr.next;
                  size++;
              }
            //   System.out.println("indx" + indx);
            //   if(currHead != null){
            //        System.out.println(currHead.val);
            //   }
              result[indx] = (size > 0) ? currHead : null;
              if(currTail != null){
                  ListNode next = currTail.next;
                  currTail.next = null;
                  curr = next;
                  size = 0;
              }
              currHead = null;
        }
        //at last you will be returning your result.
        return result;
    }
}
-----------------------------------------------------C++-----------------------------------------------------------------------
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int len = 0; 
        for(ListNode *curr = head; curr != NULL; curr = curr->next){
            len++;
        }
        //this is the array that we will be returning
        vector<ListNode*> result(k);
        //no we will caculate least number of nodes each part will have i.e. 'equals' and the number of parts that will have one extra node starting from left most part i.e. 'extras'
        int extras = len % k, equals = len / k, indx = 0, size = 0;
        //these pointers or say references will be used to populate the parts
        ListNode *currHead = head, *currTail = NULL, *curr = head;
        // this is we populating those part which have one extra node
        for(; indx < extras; indx++){
              while(curr != NULL && size < equals + 1){
                  if(currHead == NULL)currHead = curr;
                  currTail = curr;
                  curr = curr->next;
                  size++;
              }
              result[indx] = (size > 0) ? currHead : NULL;
              //once you have formed a part form currHead to currTail, then you will break it's link with subsequent(following) parts
              if(currTail != NULL){
                  ListNode *next = currTail->next;
                  currTail->next = NULL;
                  curr = next;
                   size = 0; 
              }
              currHead = NULL;
        }
        //then you will be populating parts which are just having 'equals' number of nodes
        for(indx = extras; indx < k; indx++){
             while(curr != NULL && size < equals){
                  if(currHead == NULL)currHead = curr;
                  currTail = curr;
                  curr = curr->next;
                  size++;
              }

              result[indx] = (size > 0) ? currHead : NULL;
              if(currTail != NULL){
                  ListNode *next = currTail->next;
                  currTail->next = NULL;
                  curr = next;
                  size = 0;
              }
              currHead = NULL;
        }
        //at last you will be returning your result
        return result;
    }
};
