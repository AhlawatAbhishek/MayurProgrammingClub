-------------------------------------Java---------------------------------------
class Solution {
    public int minimumLength(String s) {
        int left = 0, right = s.length() - 1;
        
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                break;
            } else {
                while (left < right && s.charAt(left) == s.charAt(left + 1)) {
                    left++;
                }
                
                while (left < right && s.charAt(right) == s.charAt(right - 1)) {
                    right--;
                }
                
                left++;
                right--;
            }
        }
        
        return right < left ? 0 : (right - left + 1);
    }
}

-----------------------------C++------------------------------------------------
class Solution {
public:
    int minimumLength(string s) {
        //placing pointers at the very left and very right ends of the string
         int left = 0, right = s.size()-1;
        while(left < right){
            if(s[left] != s[right])break;
            else{//form the largest valid prefix and suffix for deletion greedily so that the remaining length of 's' is minimum after deletion of prefix and suffix
            //forming prefix
                while(left < right && s[left] == s[left + 1])left++;
            //forming suffix    
                while(left < right && s[right] == s[right - 1])right--;
                left++;
                right--;
            }
        }
        return (right < left) ? 0 : (right - left + 1);
    }
};
