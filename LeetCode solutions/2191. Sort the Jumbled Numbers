----------------------Java-------------------------------
class Solution {
    public int[] sortJumbled(int[] mapping, int[] nums) {
        int numsLen = nums.length;
        int newOldNumMp[][] = new int[numsLen][2];
        for(int indx = 0; indx < numsLen; indx++){
            int oldNum = nums[indx];
            int newNum = getNewNum(oldNum, mapping);
            newOldNumMp[indx] = new int[]{newNum, oldNum};
        }
        Arrays.sort(newOldNumMp, (a, b)->(a[0] - b[0]));
        for(int indx = 0; indx < numsLen; indx++){
            nums[indx] = newOldNumMp[indx][1];
        }
        return nums;
    }
    private int getNewNum(int oldNum, int mapping[]){
         if(oldNum == 0)return mapping[0];
         int newNum = 0, mul = 1;
         while(oldNum > 0){
            int dig = oldNum % 10;
            newNum = newNum + mapping[dig] * mul;
            mul *= 10;
            oldNum /= 10;
         }       
         return newNum;
    }
}
----------------------C++--------------------------------
class Solution {
public:
    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {
        vector<pair<int, int>> mappedNums(nums.size());
        for (int indx = 0; indx < nums.size(); ++indx) {
            mappedNums[indx] = {getMappedNumber(nums[indx], mapping), nums[indx]};
        }

        stable_sort(mappedNums.begin(), mappedNums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            return a.first < b.first;
        });

        for (int indx = 0; indx < nums.size(); ++indx) {
            nums[indx] = mappedNums[indx].second;
        }

        return nums;
    }

private:
    int getMappedNumber(int oldNum, const vector<int>& mapping) {
        int newNum = 0;
        int mul = 1;
        if (oldNum == 0) return mapping[0];
        while (oldNum > 0) {
            int digit = oldNum % 10;
            newNum = mapping[digit] * mul + newNum;
            mul *= 10;
            oldNum /= 10;
        }
        return newNum;
    }
};
