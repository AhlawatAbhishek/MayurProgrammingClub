--------------------------------------------------------CODE WITHOUT COMMENTS-------------------------------------------------------------
----------------------------------------------C++-----------------------------------------------------------------
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode *dummyHead = new ListNode(), *rangeHead = NULL, *prevNode = dummyHead, *currNode = head, *rangeTail = NULL, *rangeHeadPrev = prevNode; 
        dummyHead->next = head;
        int nodeNum = 1;
        for(; nodeNum<left; nodeNum++){
             prevNode = currNode;
             currNode = currNode->next;              
        }
        rangeHeadPrev = prevNode;
        for(; nodeNum<=right; nodeNum++){
            //  cout<<"Entered"<<endl;
             ListNode* nextNode = currNode->next;
             if(nodeNum == left)rangeHead = currNode;
             if(nodeNum == right)rangeTail = currNode;
             currNode->next = (nodeNum != left) ? prevNode : NULL;
             prevNode = currNode;
             currNode = nextNode;
        }   
        // if(rangeHead != NULL && rangeTail != NULL){
        //     cout<<"rangeHead: "<<rangeHead->val<<" rangeTail: "<<rangeTail->val<<endl;
        // } 
        rangeHeadPrev->next = rangeTail;
        rangeHead->next = currNode;
        return dummyHead->next;
    }
};
--------------------------------------------------Java------------------------------------------------------------
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode  dummyHead = new ListNode(),  rangeHead = null,  prevNode = dummyHead,  currNode = head,  rangeTail = null,  rangeHeadPrev = prevNode; 
        dummyHead.next = head;
        int nodeNum = 1;
        for(; nodeNum<left; nodeNum++){
             prevNode = currNode;
             currNode = currNode.next;              
        }
        rangeHeadPrev = prevNode;
        for(; nodeNum<=right; nodeNum++){
             ListNode  nextNode = currNode.next;
             if(nodeNum == left)rangeHead = currNode;
             if(nodeNum == right)rangeTail = currNode;
             currNode.next = (nodeNum != left) ? prevNode : null;
             prevNode = currNode;
             currNode = nextNode;
        }
        rangeHeadPrev.next = rangeTail;
        rangeHead.next = currNode;
        return dummyHead.next;
    }
}

--------------------------------------------------------CODE WITH COMMENTS--------------------------------------------------------------
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        //prevNode will be used for reversing the list, dummyHead is used in case the left value 1 i.e. then range is including the head of the linked list,
        // currNode will be used to traverse the list and at it will store the value of rangeTailNext
        ListNode  dummyHead = new ListNode(),  rangeHead = null,  prevNode = dummyHead,  currNode = head,  rangeTail = null,  rangeHeadPrev = prevNode; 
        dummyHead.next = head;
        int nodeNum = 1;
        //this is we calculating value of prevNode and rangeHeadPrev
        for(; nodeNum<left; nodeNum++){
             prevNode = currNode;
             currNode = currNode.next;              
        }
        rangeHeadPrev = prevNode;
        //then we will do the reversal operation for current part
        for(; nodeNum<=right; nodeNum++){
             ListNode  nextNode = currNode.next;
             if(nodeNum == left)rangeHead = currNode;
             if(nodeNum == right)rangeTail = currNode;
             currNode.next = (nodeNum != left) ? prevNode : null;
             prevNode = currNode;
             currNode = nextNode;
        }
        //for next part we need no to caculate the value of rangeTailNext as it will be stored in currNode
        rangeHeadPrev.next = rangeTail;//this is we attaching current Part to prevPart
        rangeHead.next = currNode;//this is we attaching current Part to nextPart
        return dummyHead.next;//at  last we will return dummyHead.next which will be the head of resultant list
    }
}