------------------------------------------------------------------------Java---------------------------------------------------------------------------------------------------------
class Solution {
    public int[] getFinalState(int[] nums, int k, int multiplier) {
        PriorityQueue<int[]> minNumHeap = new PriorityQueue<>((a, b)->{
            if(a[0] != b[0])return a[0] - b[0];
            else return a[1] - b[1];
        });
        int size = nums.length;
        for(int indx = 0; indx < size; indx++){
           minNumHeap.offer(new int[]{nums[indx], indx});
        }
        while(k-->0){
            var minNumPr = minNumHeap.poll();
            int minNum = minNumPr[0], minNumIndx = minNumPr[1];
            int newNum = minNum * multiplier;
            minNumHeap.offer(new int[]{newNum, minNumIndx});
            nums[minNumIndx] = newNum;            
        } 
        return nums;
    }
}
