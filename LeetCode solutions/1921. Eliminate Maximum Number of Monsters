//T.C.: O(n * logn)
//S.C.: O(n)
----------------------------------------------------C++-----------------------------------------
class Solution {
public:
    int eliminateMaximum(vector<int>& dist, vector<int>& speed) {
        int wpTime = 0, killCount = 0, sz = dist.size();
        priority_queue<int, vector<int>, greater<int>> reachTimes;
        //to calculate reach wpTimes of monsters to the city and subsequently storing them in a min heap
        for(int indx = 0; indx < sz; indx++){
            //caculate wpTime to reach city for current monster
            int timeToReach = (dist[indx] + speed[indx] - 1) / speed[indx];
            reachTimes.push(timeToReach);
        }
        //now you have maintained the wpTime reach for each monster in increasing order with the help of min heap
        //do a simulation of the game to see how many monsters you can kill with dying
        while(!reachTimes.empty()){
            int currRTime = reachTimes.top();
            // cout<<"currRTime: "<<currRTime <<" wpTime: "<<wpTime<<endl;
            reachTimes.pop();
            if(wpTime >= currRTime && killCount > 0){
                return killCount;
            }else{//you can kill the monster with weapon since it will be fully charged as of now
                killCount++;
            }
            //to indicate chargin of weapon
            wpTime++;
        }
        //this will be the case where you are able to eliminate all of the monsters
        return killCount;
    }
};
-----------------------------------------Java---------------------------------------------------
class Solution {
    public int eliminateMaximum(int[] dist, int[] speed) {
       int wpTime = 0, killCount = 0, sz = dist.length;
        PriorityQueue<Integer> reachTimes = new PriorityQueue<>();
        //to calculate reach wpTimes of monsters to the city and subsequently storing them in a min heap
        for(int indx = 0; indx < sz; indx++){
            //caculate wpTime to reach city for current monster
            int timeToReach = (dist[indx] + speed[indx] - 1) / speed[indx];
            reachTimes.offer(timeToReach);
        }
        //now you have maintained the wpTime reach for each monster in increasing order with the help of min heap
        //do a simulation of the game to see how many monsters you can kill with dying
        while(!reachTimes.isEmpty()){
            int currRTime = reachTimes.poll ();
            if(wpTime >= currRTime && killCount > 0){
                return killCount;
            }else{//you can kill the monster with weapon since it will be fully charged as of now
                killCount++;
            }
            //to indicate chargin of weapon
            wpTime++;
        }
        //this will be the case where you are able to eliminate all of the monsters
        return killCount; 
    }
}
