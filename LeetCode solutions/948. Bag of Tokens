---------------------------------C++-------------------------------------------
class Solution {
public:
    int bagOfTokensScore(vector<int>& tokens, int power) {
        //in order to be able to apply two pointer approach we have sorted the array
        sort(tokens.begin(), tokens.end());
        //two pointers to make greedy picking of tokens that are unplayed easily
        int left = 0, right = tokens.size()-1;
        int maxScore = 0, currScore = 0;
        while(left <= right){//you will keep playing till this condition holds true
            //face up move
            if(power >= tokens[left]){//you will try play more and more face up moves so that you score can be maximum
                currScore++;
                power -= tokens[left++];//picking minimum value unplayed token
            }else{//face down move
                currScore--;
                power += tokens[right--];//picking maximum value unplayed token
            }
            if(currScore < 0)break;//if at certain point you current score drops below zero then you will terminate your play or game
            maxScore = max(maxScore, currScore);
        }
        return maxScore;
    }
};
--------------------------------------Java-------------------------------------
class Solution {
    public int bagOfTokensScore(int[] tokens, int power) {
        Arrays.sort(tokens);
        int left = 0, right = tokens.length - 1;
        int maxScore = 0, currScore = 0;
        
        while (left <= right) {
            if (power >= tokens[left]) {
                currScore++;
                power -= tokens[left++];
            } else {
                currScore--;
                power += tokens[right--];
            }
            if (currScore < 0)
                break;
            maxScore = Math.max(maxScore, currScore);
        }
        
        return maxScore;
    }
}

