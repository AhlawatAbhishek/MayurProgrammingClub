------------------------------------------------------------------------------CODE WITHOUT COMMENTS--------------------------------------------------------------------------
=================C++===================================================
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();
        if((len1 + len2) != len3){
            return false;
        }
        vector<vector<bool>> indxState(len1+1, vector<bool>(len2+1, false));
        indxState[0][0] = true;

        for(int indx1 = 1; indx1<indxState.size(); indx1++){
            indxState[indx1][0] = indxState[indx1-1][0] && (s1[indx1-1] == s3[indx1-1]); 
        }
        for(int indx2 = 1; indx2<indxState[0].size(); indx2++){
            indxState[0][indx2] = indxState[0][indx2-1] && (s2[indx2-1] == s3[indx2-1]);
        }
        for(int indx1 = 1; indx1<indxState.size(); indx1++){
            for(int indx2 = 1; indx2<indxState[0].size(); indx2++){
                indxState[indx1][indx2] = (indxState[indx1-1][indx2] && s1[indx1-1] == s3[indx1+indx2-1]) || (indxState[indx1][indx2-1] && s2[indx2-1] == s3[indx1+indx2-1]); 
            }
        }
        return indxState[len1][len2];
    }
};
==================================================Java===========================
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
           int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();
        if((len1 + len2) != len3){
            return false;
        }
        boolean indxState[][] = new boolean[len1+1][len2+1];
        indxState[0][0] = true;

        for(int indx1 = 1; indx1<indxState.length; indx1++){
            indxState[indx1][0] = indxState[indx1-1][0] && (s1.charAt(indx1-1) == s3.charAt(indx1-1)); 
        }
        for(int indx2 = 1; indx2<indxState[0].length; indx2++){
            indxState[0][indx2] = indxState[0][indx2-1] && (s2.charAt(indx2-1) == s3.charAt(indx2-1));
        }
        for(int indx1 = 1; indx1<indxState.length; indx1++){
            for(int indx2 = 1; indx2<indxState[0].length; indx2++){
                indxState[indx1][indx2] = (indxState[indx1-1][indx2] && s1.charAt(indx1-1) == s3.charAt(indx1+indx2-1)) || (indxState[indx1][indx2-1] && s2.charAt(indx2-1) == s3.charAt(indx1+indx2-1)); 
            }
        }
        return indxState[len1][len2];
    }
}
------------------------------------------------------------------------------CODE WITH COMMENTS------------------------------------------------------------------------------
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {

           int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();
        // if the length of s3 is not equal to sum of lengths of s1 and s2   
        if((len1 + len2) != len3){
            return false;
        }
        //this is 2 d array which will store the result for the states(index combination of two strings for eg. (0, 1), indx1 = 0, indx2 = 1) to avoid extra work and to from bigger solution based upon smaller solutions of states
        boolean indxState[][] = new boolean[len1+1][len2+1];

        //if you have not made any choice of the index of any of the strings
        indxState[0][0] = true;

        // if let's you havent picked anything from second string and picking only from the first string
        for(int indx1 = 1; indx1<indxState.length; indx1++){
            indxState[indx1][0] = indxState[indx1-1][0] && (s1.charAt(indx1-1) == s3.charAt(indx1-1)); 
        }
        //if you are picking only from second string as of now
        for(int indx2 = 1; indx2<indxState[0].length; indx2++){
            indxState[0][indx2] = indxState[0][indx2-1] && (s2.charAt(indx2-1) == s3.charAt(indx2-1));
        }
        // for each state you will be calculating it's result based upon the result of it's previous states and also greedy taking contributions form matching states only
        for(int indx1 = 1; indx1<indxState.length; indx1++){
            for(int indx2 = 1; indx2<indxState[0].length; indx2++){
                indxState[indx1][indx2] = (indxState[indx1-1][indx2] && s1.charAt(indx1-1) == s3.charAt(indx1+indx2-1)) || (indxState[indx1][indx2-1] && s2.charAt(indx2-1) == s3.charAt(indx1+indx2-1)); 
            }
        }
        //and at last you will return this particular state (where you have exhausted the lengths of both of the strings) which having your answer
        return indxState[len1][len2];
    }
}
