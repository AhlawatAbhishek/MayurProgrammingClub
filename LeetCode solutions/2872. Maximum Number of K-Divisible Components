=========================================================================Java------------------------------------------------------------------------------------------------------
class Solution {
    private int compCount = 0;
    private Map<Integer, List<Integer>> graph = new HashMap<>();
    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        for(var edge : edges){
            graph.putIfAbsent(edge[0], new ArrayList<>());
            graph.putIfAbsent(edge[1], new ArrayList<>());
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        long treeSum = makeComps(0, values, k); 
        if(treeSum % k == 0)compCount++; 
        return compCount;    
    }
    private long makeComps(int srcNode, int values[], int k){
        long currSubTreeSum = 0l;
        long srcValue = values[srcNode] * 1l;
        values[srcNode] = -1;
        if(!graph.containsKey(srcNode))return srcValue % k;
        for(var neigh : graph.get(srcNode)){
            if(values[neigh] != -1){
                long neighTreeSum = (makeComps(neigh, values, k) % k);
                // System.out.println("srcNode: " + srcNode + " neighNode " + neigh + 
                // " neighTreeSum: " + neighTreeSum);
                if(neighTreeSum == 0){
                    // System.out.println("found comp");
                    compCount++;
                }
                currSubTreeSum = ((currSubTreeSum % k) + neighTreeSum)%k;
            }   
        }
        if(currSubTreeSum != 0 && (currSubTreeSum % k) == 0){
            long returnVal = srcValue % k;
           return returnVal;
        }else{
            return (srcValue % k + currSubTreeSum % k)%k;
        } 
    }   
}
====================================================================javascript--------------------------------------------------------------------------------------------------
/**
 * @param {number} n
 * @param {number[][]} edges
 * @param {number[]} values
 * @param {number} k
 * @return {number}
 */
var maxKDivisibleComponents = function(n, edges, values, k) {
    let compCount = 0;
    let graph = new Map();
    for(edge of edges){
            if(!graph.has(edge[0]))graph.set(edge[0], new Array());
            if(!graph.has(edge[1]))graph.set(edge[1], new Array());
            graph.get(edge[0]).push(edge[1]);
            graph.get(edge[1]).push(edge[0]);
        }
        const makeComps = (srcNode, values, k)=>{
            let currSubTreeSum = 0;
            let srcValue = values[srcNode];
            values[srcNode] = -1;
            if(!graph.has(srcNode))return srcValue % k;
            for(neigh of graph.get(srcNode)){
                if(values[neigh] != -1){
                    let neighTreeSum = (makeComps(neigh, values, k) % k);
                    if(neighTreeSum == 0){
                        compCount++;
                    }
                    currSubTreeSum = ((currSubTreeSum % k) + neighTreeSum)%k;
                }   
            }
            if(currSubTreeSum != 0 && (currSubTreeSum % k) == 0){
                let returnVal = srcValue % k;
            return returnVal;
            }else{
                return (srcValue % k + currSubTreeSum % k)%k;
            }
        }         
        
        let treeSum = makeComps(0, values, k); 
        if(treeSum % k == 0)compCount++; 
        return compCount;   
        
};
