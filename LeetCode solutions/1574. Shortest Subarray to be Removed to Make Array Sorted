---------------------------------------------------------------------------Java----------------------------------------------------------------------------------------------------
class Solution {
    public int findLengthOfShortestSubarray(int[] arr) {
        int size = arr.length, left = 0, right = size - 1;
        while(left+1 < size && arr[left] <= arr[left + 1]){
            left++; 
        }
        if(left == size - 1)return 0;
        while(right - 1 > -1 && arr[right] >= arr[right-1]){
            right--;
        }
        int minRemove =  Math.min(size - left - 1, right);
         int leftPtr = left, rightPtr = size - 1;
        while (leftPtr > -1 && rightPtr >= right) {
            if (arr[leftPtr] <= arr[rightPtr]) {
                minRemove = Math.min(minRemove, rightPtr - leftPtr - 1);
                rightPtr--;
            } else {
                leftPtr--;
            }
        }
        return minRemove;
    }
}
---------------------------------------------------------------------------Javascript---------------------------------------------------------------------------------------------
/**
 * @param {number[]} arr
 * @return {number}
 */
var findLengthOfShortestSubarray = function(arr) {
    let size = arr.length, left = 0, right = size - 1;
        while(left+1 < size && arr[left] <= arr[left + 1]){
            left++; 
        }
        if(left == size - 1)return 0;
        while(right - 1 > -1 && arr[right] >= arr[right-1]){
            right--;
        }
        let minRemove =  Math.min(size - left - 1, right);
         let leftPtr = left, rightPtr = size - 1;
        while (leftPtr > -1 && rightPtr >= right) {
            if (arr[leftPtr] <= arr[rightPtr]) {
                minRemove = Math.min(minRemove, rightPtr - leftPtr - 1);
                rightPtr--;
            } else {
                leftPtr--;
            }
        }
        return minRemove;
};
------------------------------------------------------------------------------C++-----------------------------------------------------------------------------------------------------
class Solution {
public:
    int findLengthOfShortestSubarray(vector<int>& arr) {
        int size = arr.size(), left = 0, right = size - 1;
        while(left+1 < size && arr[left] <= arr[left + 1]){
            left++; 
        }
        if(left == size - 1)return 0;
        while(right - 1 > -1 && arr[right] >= arr[right-1]){
            right--;
        }
        int minRemove =  min(size - left - 1, right);
         int leftPtr = left, rightPtr = size - 1;
        while (leftPtr > -1 && rightPtr >= right) {
            if (arr[leftPtr] <= arr[rightPtr]) {
                minRemove = min(minRemove, rightPtr - leftPtr - 1);
                rightPtr--;
            } else {
                leftPtr--;
            }
        }
        return minRemove;
    }
};
