----------------------------------------C++--------------------------------------------------------------------------------------------
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        //we will always apply binary search for partition on the smaller array so that the index of the partition for the other array is well within the bound of index for a zero-based indexed array
        if (nums1.size() > nums2.size()) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int len1 = nums1.size();
        int len2 = nums2.size();
        //now you will binary search for the value of partition1 in samller array and then accordingly determine the value of partition2 in bigger array
        int leftLimit = 0;
        int rightLimit = len1;
        while (leftLimit <= rightLimit) {
            //determining the value of partitions
            int nums1Partition = (leftLimit + rightLimit)/2;
            int nums2Partition = (len1 + len2 + 1)/2 - nums1Partition;

            //these 4 terms will help you to reduce your search sapce in binary search
            int maxLeftNums1 = (nums1Partition == 0) ? INT_MIN : nums1[nums1Partition - 1];
            int minRightNums1 = (nums1Partition == len1) ? INT_MAX : nums1[nums1Partition];
            int maxLeftNums2 = (nums2Partition == 0) ? INT_MIN : nums2[nums2Partition - 1];
            int minRightNums2 = (nums2Partition == len2) ? INT_MAX : nums2[nums2Partition];
            //then you will reduce your search space of binary search 
            //move your paritition1 to right hand side in nums1
            if(maxLeftNums2 > minRightNums1) { 
                leftLimit = nums1Partition + 1;
            } else if (maxLeftNums1 > minRightNums2) {//move partition1 to left hand side in nums1
                rightLimit = nums1Partition - 1;
            }//if both of your partitions are correct, then you will return the median according to case whether the overall length of the merged array is even or odd
            else if (maxLeftNums1 <= minRightNums2 && maxLeftNums2 <= minRightNums1) {
                if ((len1 + len2) % 2 == 0) {
                    return ((double)max(maxLeftNums1, maxLeftNums2) + min(minRightNums1, minRightNums2))/2;
                } else {
                    return (double)max(maxLeftNums1, maxLeftNums2);
                }
            } 
        }
        return 0.0;
    }
};
-----------------------------------------------------------------------------------Java----------------------------------------------------------------------------
class Solution {
    public double findMedianSortedArrays(int nums1[], int nums2[]) {
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int len1 = nums1.length;
        int len2 = nums2.length;

        int low = 0;
        int high = len1;
        while (low <= high) {
            int nums1Partition = (low + high)/2;
            int nums2Partition = (len1 + len2 + 1)/2 - nums1Partition;
            int maxLeftNums1 = (nums1Partition == 0) ? Integer.MIN_VALUE : nums1[nums1Partition - 1];
            int minRightNums1 = (nums1Partition == len1) ? Integer.MAX_VALUE : nums1[nums1Partition];

            int maxLeftNums2 = (nums2Partition == 0) ? Integer.MIN_VALUE : nums2[nums2Partition - 1];
            int minRightNums2 = (nums2Partition == len2) ? Integer.MAX_VALUE : nums2[nums2Partition];

            if(maxLeftNums2 > minRightNums1) { 
                low = nums1Partition + 1;
            } else if (maxLeftNums1 > minRightNums2) { 
                high = nums1Partition - 1;
            }else if (maxLeftNums1 <= minRightNums2 && maxLeftNums2 <= minRightNums1) {
                if ((len1 + len2) % 2 == 0) {
                    return ((double)Math.max(maxLeftNums1, maxLeftNums2) + Math.min(minRightNums1, minRightNums2))/2;
                } else {
                    return (double)Math.max(maxLeftNums1, maxLeftNums2);
                }
            } 
        }
        return 0.0;
    }
}
