---------------------------------------Java------------------------------------
class Solution {
    public int equalSubstring(String s, String t, int maxCost) {
        int leftPtr = 0, size = s.length(), rightPtr = 0;
        int currCost = 0, maxLen = 0;
        
        while (rightPtr < size) {
            currCost += Math.abs(s.charAt(rightPtr) - t.charAt(rightPtr));
            
            if (currCost > maxCost) {
                while (leftPtr <= rightPtr && currCost > maxCost) {
                    currCost -= Math.abs(s.charAt(leftPtr) - t.charAt(leftPtr));
                    leftPtr++;
                }
            }
            
            if (leftPtr <= rightPtr) {
                maxLen = Math.max(maxLen, rightPtr - leftPtr + 1);
            }
            
            rightPtr++;
        }
        
        return maxLen;
    }
}

-----------------------------C++-----------------------------------------------
class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
       int leftPtr = 0, size = s.size(), rightPtr = 0;
       int currCost = 0, maxLen = 0;
       while(rightPtr < size){
          currCost += abs(s[rightPtr] - t[rightPtr]);
          if(currCost > maxCost){
            while(leftPtr <= rightPtr && currCost > maxCost){
                  currCost -= abs(s[leftPtr] - t[leftPtr]);
                  leftPtr++;
            }
          }
          if(leftPtr <= rightPtr){
            maxLen = max(maxLen, rightPtr - leftPtr + 1);
          }
          rightPtr++;
       }  
       return maxLen;
    }
};
