-------------------------------------------------------------------------------CODE WITHOUT COMMENTS---------------------------------------------------------------------------
-----------------------------------Java-----------------------------------------------------------------
class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
    int left = 0;
        List<String> answer = new ArrayList<>();
        while (left < words.length) {
            int right = getRightPtr(left, words, maxWidth);
            answer.add(justify(left, right, words, maxWidth));
            left = right + 1;
        }
        return answer;
    }
    int getRightPtr(int left, String[] words, int maxWidth) {
        int right = left;
        int sum = words[right++].length();
        while (right < words.length && (sum + 1 + words[right].length()) <= maxWidth)
            sum += 1 + words[right++].length();
        return right - 1;
    }

    String justify(int left, int right, String[] words, int maxWidth) {
        if (right - left == 0) return addRemSpaces(words[left], maxWidth);

        boolean isLastLine = right == words.length - 1;
    
        int numSpaces = right - left;
    
        int totalSpace = maxWidth - findLengthOfRange(left, right, words);
    
        String space = isLastLine ? " " : findSpaceSeq(totalSpace / numSpaces);
        int remainder = isLastLine ? 0 : totalSpace % numSpaces;
    
        String answer = "";
        for (int i = left; i <= right; i++) {
            answer += (words[i]) + (space) + (remainder-- > 0 ? " " : "");
        }
    
        int leftPtr = 0, rightPtr = answer.length() - 1;

        //removing trailing spaces
        while(left < answer.length() && answer.charAt(leftPtr)  ==  ' '){
            leftPtr++;
        }
        while(rightPtr > - 1 && answer.charAt(rightPtr) == ' '){
            rightPtr--;
        }
        return addRemSpaces(answer.substring(leftPtr, rightPtr + 1 - leftPtr), maxWidth);
        }

    String addRemSpaces(String answer, int maxWidth) {
        if (answer.length() >= maxWidth) return answer;
        return answer + new String(new char[maxWidth - answer.length()]).replace('\0', ' ');
    }

    int findLengthOfRange(int left, int right, String[] words) {
        int length = 0;
        for (int i = left; i <= right; i++) {
            length += words[i].length();
        }
        return length;
    }

    String findSpaceSeq(int count) {
        return new String(new char[count]).replace('\0', ' ');
    }
    
}

-----------------------------------C++------------------------------------------------------------------

class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
    int left = 0;
        std::vector<string> answer;
        while (left < words.size()) {
            int right = getRightPtr(left, words, maxWidth);
            answer.push_back(justify(left, right, words, maxWidth));
            left = right + 1;
        }
        return answer;
    }
private:

    int getRightPtr(int left, vector<string>& words, int maxWidth) {
        int right = left;
        int sum = words[right++].length();
        while (right < words.size() && (sum + 1 + words[right].length()) <= maxWidth)
            sum += 1 + words[right++].length();
        return right - 1;
    }

    string justify(int left, int right, vector<string>& words, int maxWidth) {
        if (right - left == 0) return addRemSpaces(words[left], maxWidth);

        bool isLastLine = right == words.size() - 1;
    
        int numSpaces = right - left;
    
        int totalSpace = maxWidth - findLengthOfRange(left, right, words);
    
        string space = isLastLine ? " " : findSpaceSeq(totalSpace / numSpaces);
        int remainder = isLastLine ? 0 : totalSpace % numSpaces;
    
        string answer = "";
        for (int i = left; i <= right; i++) {
            answer += (words[i]) + (space) + (remainder-- > 0 ? " " : "");
        }
    
        int leftPtr = 0, rightPtr = answer.size() - 1;

        //removing trailing spaces
        while(left < answer.size() && answer[leftPtr]  ==  ' '){
            leftPtr++;
        }
        while(rightPtr > - 1 && answer[rightPtr] == ' '){
            rightPtr--;
        }
        return addRemSpaces(answer.substr(leftPtr, rightPtr + 1 - leftPtr), maxWidth);
        }

    string addRemSpaces(string answer, int maxWidth) {
        if (answer.length() >= maxWidth) return answer;
        return answer + string(maxWidth - answer.length(), ' ');
    }

    int findLengthOfRange(int left, int right, vector<string>& words) {
        int length = 0;
        for (int i = left; i <= right; i++) {
            length += words[i].length();
        }
        return length;
    }

    string findSpaceSeq(int count) {
        return std::string(count, ' ');
    }
    
};


---------------------------------------------------------------------------CODE WITH COMMENTS-----------------------------------------------------------------------------------
class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
    int left = 0;
        std::vector<string> answer;
        //this we using the sliding window technique to form a single line
        while (left < words.size()) {
            int right = getRightPtr(left, words, maxWidth);
            //once you are having the range of words in the given words array or say vector, then you will form your line by appending those words in the range by following the rules mentioned in the problem
            answer.push_back(justify(left, right, words, maxWidth));
            left = right + 1;
        }
        return answer;
    }
private:
    //this function is used to find the range of the current window which will make a single line
    int getRightPtr(int left, vector<string>& words, int maxWidth) {
        int right = left;
        //sum represents the number of characters in the line being made by the range left to right (left and right both inclusive)
        int sum = words[right++].length();
        //after each word you will try to add one space and add the contributions to the sum variable, which number of characters currently present in the  line
        while (right < words.size() && (sum + 1 + words[right].length()) <= maxWidth)
          //as long as the number of the characters in the line being made does not exceeds the maxWidth till then your will keep adding the words from the given words array or say vector
            sum += 1 + words[right++].length();

        //at last you will be returning the end point of your range of the current window from left to right pointers
        return right - 1;
    }
    //this the function that will from the line accoring to rules given in the problem statement
    string justify(int left, int right, vector<string>& words, int maxWidth) {
        //if you are having only single word in the line, then you will add the remaining slots with spaces after adding the word to the line
        if (right - left == 0) return addRemSpaces(words[left], maxWidth);

        //since the last line is not fully justified, so this variable is for keep check whether we are in last line or not
        //if the end of the current range from left to right happens to be at the last word in the words array or say vector, then your are the last line
        bool isLastLine = right == words.size() - 1;

        //number of slots between the words available to you to insert the spaces if required to make the number of characters in each line equal to the maxWidth  
        int numSpaces = right - left;
          
        //the space that will required to add to slots available in order to make the number of characters in the line equal to maxWidth  
        int totalSpace = maxWidth - findLengthOfRange(left, right, words)/*this the total number of characters present int the words between the range left to right*/;
        
        //so this is the space sequence which will be inserted in all the slots available
        string space = isLastLine ? " " : findSpaceSeq(totalSpace / numSpaces);
        //the is extra space left in case the space could not be evenly divied in the slots available
        int remainder = isLastLine ? 0 : totalSpace % numSpaces;
    
        //this answer variable is nothing but the current line being formed
        string answer = "";
        //from the words in the range left to right you will be forming the line
        for (int i = left; i <= right; i++) {
            answer += (words[i]) + (space) + (remainder-- > 0 ? " " : "");
        }
    
        int leftPtr = 0, rightPtr = answer.size() - 1;

        //removing trailing and leading spaces from the line
        while(left < answer.size() && answer[leftPtr]  ==  ' '){
            leftPtr++;
        }
        while(rightPtr > - 1 && answer[rightPtr] == ' '){
            rightPtr--;
        }
        //if the are any remaining spaces remaining then you will add it traversing from leftmost slots available to insert to space
        return addRemSpaces(answer.substr(leftPtr, rightPtr + 1 - leftPtr), maxWidth);
        }

    string addRemSpaces(string answer, int maxWidth) {
        if (answer.length() >= maxWidth) return answer;
        return answer + string(maxWidth - answer.length(), ' ');
    }
    //finding the total number of characters in the words form range left to right in the given words array or say vector
    int findLengthOfRange(int left, int right, vector<string>& words) {
        int length = 0;
        for (int i = left; i <= right; i++) {
            length += words[i].length();
        }
        return length;
    }
    //this is you finding the space sequence that will be evenly distributed among all the slots available for spaces
    string findSpaceSeq(int count) {
        return std::string(count, ' ');
    }
    
};
