--------------------------------------C++------------------------------------------------------
class Solution {
public:
    int longestStrChain(vector<string>& words) {
        sort(words.begin(), words.end(), [](const string& str1, const string& str2)->bool{
            return str1.size() < str2.size();
        });
        unordered_map<string, int> chainLen;
        int maxLen = 0;
        for (string & word : words) {
            for (int indx = 0; indx < word.size(); indx++) {
                string pred = word.substr(0, indx) + word.substr(indx + 1);
                chainLen[word] = max(chainLen[word], chainLen.find(pred) == chainLen.end() ? 1 : chainLen[pred] + 1);
            }
            maxLen = max(maxLen, chainLen[word]);
        }
        return maxLen;
    }
};
-----------------------------------------------------------Java--------------------------------------------
class Solution {
    public int longestStrChain(String[] words) {
        //sort words array according to increasing order of words length
        Arrays.sort(words, (a, b)-> a.length() - b.length());
        //this hashmap will be used to store the max length of chain ending at a particular word(state)
        HashMap<String, Integer> chainLen = new HashMap<>();
        int maxLen = 0;
        //for every word to consider max chain len ending at that particular word we will consider max contribution of the predecessors possible(basically those are present in words array)
        for (var word : words) {
            //for each word you will be generating it's all possible predecessors
            for (int indx = 0; indx < word.length(); indx++) {
                String pred = word.substring(0, indx) + word.substring(indx + 1);
                //if that predcessor exists in words array then you will consider it's contribution and accordingly update value of chainLen for current word
                chainLen.put(word, Math.max(chainLen.getOrDefault(word, 0), (!chainLen.containsKey(pred)) ? 1 : chainLen.get(pred) + 1));
            }
            //for each word you will consider a chain ending upon that word, maximum chain len possible
            maxLen = Math.max(maxLen, chainLen.get(word));
        }
       //at last you will return max chain len 
        return maxLen;
    }
}