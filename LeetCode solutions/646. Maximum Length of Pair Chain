----------------------------------------------------------------------CODE WITHOUT COMMENTS----------------------------------------------------------------------
------------------C++------------------------------------------------------
class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) {
        sort(pairs.begin(), pairs.end(), [](const vector<int> & p1, const vector<int> & p2)->bool{
              return p2[1] > p1[1];
        });
        int sz = pairs.size(), currLen = 1, prevEnd = pairs[0][1];
        for(int indx = 1; indx < sz; indx++){
            auto & pr = pairs[indx];
            int currStart = pairs[indx][0];
            if(prevEnd < currStart){
                currLen++;
                prevEnd = pr[1];
            }
        }
        return currLen;
    }
};
---------------------Java-------------------------------------------------
class Solution {
    public int findLongestChain(int[][] pairs) {
         Arrays.sort(pairs, (a, b)->(a[1] - b[1]));
        int sz = pairs.length, currLen = 1, prevEnd = pairs[0][1];
        for(int indx = 1; indx < sz; indx++){
            var pr = pairs[indx];
            int currStart = pairs[indx][0];
            if(prevEnd < currStart){
                currLen++;
                prevEnd = pr[1];
            }
        }
        return currLen;
    }
}
----------------------------------------------------------------------CODE WITH COMMENTS----------------------------------------------------------------------
class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) {
        //we have sorted pairs array according to increasing values of end points of pairs
        //why we have done this ? -> Because it will allow us to greedy pick the maximum number of non overlapping pairs
        sort(pairs.begin(), pairs.end(), [](const vector<int> & p1, const vector<int> & p2)->bool{
              return p2[1] > p1[1];
        });
        //Forming the chain while checking that the current to be considered for adding in the chain does not overlap with the end of the  chain
        int sz = pairs.size(), currLen = 1, prevEnd = pairs[0][1]/*end of the chain being forme*/;
        for(int indx = 1; indx < sz; indx++){
            auto & pr = pairs[indx];//current pair to be considered for adding in the chain
            int currStart = pairs[indx][0];
            if(prevEnd < currStart){
                currLen++;
                prevEnd = pr[1];
            }
        }
        return currLen;
    }
};
