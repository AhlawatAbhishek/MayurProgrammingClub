-------------------------C++-------------------------------------------------
class Solution {
public:
    int pivotInteger(int n) {
        int leftBound = 1, rightBound =  n;
        int fullSum = (n * (n + 1))/2;
        while(leftBound <= rightBound){
            int midNum = leftBound + (rightBound - leftBound) / 2;
            int firstHlfSum = (midNum * (midNum + 1))/2;
            int secondHlfSum = fullSum - firstHlfSum + midNum;
            if(firstHlfSum == secondHlfSum)return midNum;
            else if(firstHlfSum < secondHlfSum){//you picked lesser number of elements than required in first half
                leftBound = midNum + 1;
            }else{ // you picked more number of elements then required in the firstHalf
                rightBound = midNum - 1;
            }
        }
        return -1;
    }
};
---------------------------------------------------Java-------------------------
class Solution {
    public int pivotInteger(int n) {
        int leftBound = 1, rightBound = n;
        int fullSum = (n * (n + 1)) / 2;
        while (leftBound <= rightBound) {
            int midNum = leftBound + (rightBound - leftBound) / 2;
            int firstHlfSum = (midNum * (midNum + 1)) / 2;
            int secondHlfSum = fullSum - firstHlfSum + midNum;
            if (firstHlfSum == secondHlfSum)
                return midNum;
            else if (firstHlfSum < secondHlfSum)
                leftBound = midNum + 1;
            else
                rightBound = midNum - 1;
        }
        return -1;
    }
}

