class Solution {
     private class DisjointSet{
       private int parent[] = null, rank[] = null;
       public DisjointSet(int size){
           parent = new int[size];
           rank = new int[size];
           for(int node = 0; node < parent.length; node++){
               parent[node] = node;
           }
       }
       public int find(int node){
           if(this.parent[node] != node){
               parent[node] = find(parent[node]);
           }
           return parent[node];
       } 
       public void union(int node1, int node2){
           int oneRep = find(node1), twoRep = find(node2);
           if(oneRep == twoRep){
               return;
           }
           if(rank[oneRep] < rank[twoRep]){
               parent[oneRep] = twoRep;
           }else if(rank[twoRep] < rank[oneRep]){
               parent[twoRep] = oneRep;
           }else{
               parent[oneRep] = twoRep;
               rank[twoRep]++;
           }
       }
    //    -------add on to standard DSU implementation (Path Compression & union by rank)
       public void breakBond(int node){
           this.parent[node] = node;
       } 
       public boolean isConnectedToSecretKnower(int node1){//it tell you whether you know secrete either by some one outside you 
       //time batch or by some having a meeting with you at current time
           int originPer = 0;
           return find(node1) == find(originPer);
       }
    }
    private HashSet<Integer> scrtKnowers = new HashSet<>();//persons knowing the secret
    private DisjointSet dSet = null;
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        //since we are considering to traverse meeting times in batches, that's why we are sorting meetings array in increasing order of meeting times
        Arrays.sort(meetings, (a, b)-> a[2] - b[2]);
        //at time t = 0, zeroth person told the secret to FirstPerson
        scrtKnowers.add(0);
        scrtKnowers.add(firstPerson); 
        // ------Initializing our disjoint set
        dSet = new DisjointSet(n);
        //join the nodes of firstPerson and zeroth person // we also formed batch 1
         dSet.union(0, firstPerson);
         //now we will start having meetings according to sorted meetings array
        haveMeetings(meetings, n);        
        return scrtKnowers.stream().collect(Collectors.toList());
    }
    
     private void haveMeetings(int meetings[][], int totalPersons){
        int len = meetings.length;
        //we will be traversing meetings array once
        for(int indx = 0; indx<len; indx++){
            int currMeetId = indx, currMeetTime = meetings[indx][2];
            //forming batch of currMeetTime // all these meetings will be happening at the same time
            while(currMeetId < len && meetings[currMeetId][2]== currMeetTime){
                int per1 = meetings[currMeetId][0], per2 = meetings[currMeetId][1];
                dSet.union(per1, per2);
                currMeetId++;
            }
            currMeetId = indx;
            //Process the currMeetTime batch to spread the secret if possible
             while(indx < len && meetings[indx][2] == currMeetTime){
                    int per1 = meetings[indx][0], per2 = meetings[indx][1];
                 if(dSet.isConnectedToSecretKnower(per1) || dSet.isConnectedToSecretKnower(per2)){//either of the person in a meeting is knowing the secret then you will add  both of these persons to secret knower group
                  scrtKnowers.add(per1);
                  scrtKnowers.add(per2);
                 }else{//if both persons are not knowing secret then break their bond so that when either of them know the secret in some later meeting, then it should not leed to the person knowing the secret also without whom this secret knower had meeting previously
                     dSet.breakBond(per1);
                     dSet.breakBond(per2);
                 }    
                 indx++;
            }          
            indx--;
        }
    }
}
