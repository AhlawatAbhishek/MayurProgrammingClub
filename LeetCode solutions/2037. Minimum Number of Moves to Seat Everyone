-------------Counting Sort Approach------------------------------
--C++-----------------------------
class Solution {
public:
    int minMovesToSeat(vector<int>& seats, vector<int>& students) {
        int maxPos = max(*max_element(seats.begin(), seats.end()), *max_element(students.begin(), students.end()));
        vector<int> seatDiff(maxPos + 1);
        for(auto seat : seats){
            seatDiff[seat]++;
        } 
        for(auto stu : students){
            seatDiff[stu]--;
        }
        int unMatchCnt = 0, movs = 0;
        for(auto diff : seatDiff){
            movs += abs(unMatchCnt);
            unMatchCnt += diff;
        }
        return movs;
    }
};
-----------------------------Simple Sorting Approach---------------------------
-------------------Java---------------------------
class Solution {
    public int minMovesToSeat(int[] seats, int[] students) {
        Arrays.sort(seats);
        Arrays.sort(students);
        int len = seats.length, movs = 0;
        for(int indx = 0; indx < len; indx++){
            movs += Math.abs(seats[indx] - students[indx]);
        }
        return movs;
    }
}
